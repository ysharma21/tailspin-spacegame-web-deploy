trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build the Evaluation package'
  jobs:
  - job: Build
    displayName: 'Build the Evaluation package'
    steps:
    - script: |
        python -m venv env
        source env/bin/activate
        pip install -r $(System.DefaultWorkingDirectory)/evaluation/requirements.txt
        python $(System.DefaultWorkingDirectory)/evaluation/setup.py sdist
        mkdir $(System.DefaultWorkingDirectory)/evaluation/dist
        mv $(System.DefaultWorkingDirectory)/evaluation/dist/*.tar.gz $(System.DefaultWorkingDirectory)/evaluation/dist/evaluation.tar.gz
        echo '##vso[task.uploadfile]$(System.DefaultWorkingDirectory)/evaluation/dist/evaluation.tar.gz'
      displayName: 'Install dependencies, package, and archive'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'tar.gz'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz'
        replaceExistingArchive: true
      displayName: 'Archive files'

- stage: Test
  displayName: 'Test the Evaluation package'
  jobs:
  - job: Test
    displayName: 'Test the Evaluation package'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)/evaluation/dist'
        itemPattern: '**/*.tar.gz'
      displayName: 'Download package artifact'
    - script: |
        python -m venv env
        source env/bin/activate
        pip install $(System.DefaultWorkingDirectory)/evaluation/dist/evaluation.tar.gz
        python test_evaluation.py
      displayName: 'Install package and run tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/test-results/*.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish test results'

- stage: DeployOpenAI
  displayName: 'Deploy OpenAI service'
  jobs:
  - job: Deploy
    displayName: 'Deploy OpenAI service'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(subscriptionName)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group '$(resourceGroupName)' --template-file '$(ARMTemplateFileName)' --parameters subscriptionId='$(subscriptionId)' location='$(location)' openaiName='$(openAIdeploymentName)' openaiSku='$(openAISku)'
      displayName: 'Deploy OpenAI service'