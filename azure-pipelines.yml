parameters:
- name: subscriptionId
  type: string
  default: 'f3365460-b265-4b58-b696-2d5c99a6235f'
  displayName: 'Azure Subscription ID'
- name: location
  type: string
  default: 'East US'
  displayName: 'Azure Region'
- name: openAIdeploymentName
  type: string
  default: 'testado'
  displayName: 'OpenAI Service Name'
- name: openAISku
  type: string
  default: 'S0'
  displayName: 'OpenAI SKU'
- name: App Sevice name
  type: string
  default: 'service-selector'
  displayName: 'App Service Name'

trigger:
- flask_deploy

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build the Evaluation package'
  jobs:
  - job: Build
    displayName: 'Build the Evaluation package'
    steps:
    - script: |
        mkdir -p $(System.DefaultWorkingDirectory)/evaluation/dist
      displayName: 'Create dist directory'
    - script: |
        python -m venv env
        source env/bin/activate
        pip install -r $(System.DefaultWorkingDirectory)/evaluation/requirements.txt
        pip install wheel
        python $(System.DefaultWorkingDirectory)/evaluation/setup.py sdist bdist_wheel
        echo 'Contents of $(System.DefaultWorkingDirectory)/evaluation/dist:'
        ls $(System.DefaultWorkingDirectory)/evaluation/dist
      displayName: 'Install dependencies, package, and list contents'

    - task: CopyFiles@2
      inputs:
        contents: $(System.DefaultWorkingDirectory)/evaluation/**
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: drop

- stage: Test
  displayName: 'Test the Evaluation package'
  jobs:
  - job: Test
    displayName: 'Test the Evaluation package'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'drop'
        downloadPath: $(System.DefaultWorkingDirectory)
      displayName: 'Download package artifact'
    - script: |
        python -m venv env
        source env/bin/activate
        pip install -r $(System.DefaultWorkingDirectory)/evaluation/requirements.txt
        python $(System.DefaultWorkingDirectory)/evaluation/test_evaluation.py
      displayName: 'Install package and run tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/test-results/*.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish test results'



# - stage: DeployOpenAI
#   displayName: 'Deploy OpenAI service'
#   jobs:
#   - job: Deploy
#     displayName: 'Deploy OpenAI service'
#     steps:
#     - task: AzureCLI@2
#       inputs:
#         azureSubscription: '$(subscriptionName)'
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           az deployment group create --resource-group 'rg-openai-dev' --template-file '$(System.DefaultWorkingDirectory)/infra/ai/arm_template.json' 
#       displayName: 'Deploy OpenAI service'

- stage: DeployAppSvc
  displayName: 'Deploy Flask App service'
  jobs:
  - job: DeployApp
    displayName: 'Deploy App service'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
      displayName: 'Set up Python'
    - script: |
        python -m venv venv
        source venv/bin/activate
        pip install -r $(System.DefaultWorkingDirectory)/demo_app/requirements.txt
      displayName: 'Install dependencies'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive files'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: '$(subscriptionName)'
        appName: $(appName)
        package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        resourceGroupName: $(resourceGroupName)
        runtimeStack: 'PYTHON|3.8'
        startUpCommand: 'cd demo_app/app && gunicorn --bind=0.0.0.0 --timeout 600 app:app'